import pandas as pd
import os

def get_coordinates(token, model, input_folder):
    """
    Extract the coordinates of the given token from the t-SNE output file generated by SemasioFlow.
    
    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located
    
    Returns
    -------
    None
    """
    
    input_file = os.path.join(input_folder, f'{token}.tsne.30.tsv')
    df = pd.read_csv(input_file, sep='\t')

    # # Get the coordinates for each token
    # df['x'] = df[model + '.x']
    # df['y'] = df[model + '.y']

    # Get the coordinates for each token
    df['x'] = pd.to_numeric(df[model + '.x'], errors='coerce').round(4)  # Convert to numeric and round to 4 decimals
    df['y'] = pd.to_numeric(df[model + '.y'], errors='coerce').round(4)
    
    df = df[['_id', 'x', 'y']]
    output_file = os.path.join(input_folder, f'{token}-{model}.tsne.30.tsv')
    df.to_csv(output_file, sep='\t', index=False)
    print(f'The coordinates of {token}-{model} were extracted')

def get_senses(token, model, input_folder):
    """
    Add the senses of the tokens to the t-SNE output file generated by SemasioFlow.

    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located

    Returns
    -------
    None
    """

    # Construct file paths
    tsne_file = os.path.join(input_folder, f'{token}-{model}.tsne.30.tsv')
    variables_file = os.path.join(input_folder, f'{token}.variables.tsv')

    # Ensure input files exist
    if not os.path.exists(tsne_file):
        raise FileNotFoundError(f"t-SNE file not found: {tsne_file}")
    if not os.path.exists(variables_file):
        raise FileNotFoundError(f"Variables file not found: {variables_file}")

    # Read data
    tsne_df = pd.read_csv(tsne_file, sep='\t')
    variables_df = pd.read_csv(variables_file, sep='\t')

    # Map senses to t-SNE data
    senses_map = variables_df.set_index('_id')['senses'].to_dict()
    tsne_df['senses'] = tsne_df['_id'].map(senses_map)

    # Save the updated t-SNE file
    tsne_df.to_csv(tsne_file, sep='\t', index=False)
    print(f'The senses of {token}-{model} were added successfully.')

def get_model_data(token, model, input_folder):
    """
    Extract the coordinates and senses of the given token from the t-SNE output file generated by SemasioFlow.
    
    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located
    
    Returns
    -------
    None
    """
    get_coordinates(token, model, input_folder)
    get_senses(token, model, input_folder)
    print('The model data was extracted')