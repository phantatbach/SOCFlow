import pandas as pd
import os
import hdbscan

def get_coordinates(token, model, input_folder):
    """
    Extract the coordinates of the given token from the t-SNE output file generated by SemasioFlow.
    
    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located
    
    Returns
    -------
    None
    """
    
    input_file = os.path.join(input_folder, f'{token}.tsne.30.tsv')
    df = pd.read_csv(input_file, sep='\t')

    # Get the coordinates for each token
    df['x'] = pd.to_numeric(df[model + '.x'], errors='coerce').round(4)  # Convert to numeric and round to 4 decimals
    df['y'] = pd.to_numeric(df[model + '.y'], errors='coerce').round(4)
    
    df = df[['_id', 'x', 'y']]
    output_file = os.path.join(input_folder, f'{token}-{model}.tsne.30.tsv')
    df.to_csv(output_file, sep='\t', index=False)
    print(f'The coordinates of {token}-{model} were extracted')

def apply_HDBSCAN(token, model, input_folder, min_cluster_size, min_samples):
    tsne_file = os.path.join(input_folder, f'{token}-{model}.tsne.30.tsv')
    # Load tsne_data
    tsne_df = pd.read_csv(tsne_file, sep='\t')

    # Apply HDBSCAN clustering
    clusterer = hdbscan.HDBSCAN(min_cluster_size, min_samples)
    tsne_df['HDBSCAN'] = clusterer.fit_predict(tsne_df[['x', 'y']])

    # Save the updated file
    tsne_df.to_csv(tsne_file, sep='\t', index=False)
    print(f"HDBSCAN clustering applied and saved to {tsne_file}")

def get_other_info(token, model, input_folder):
    """
    Add other information of the tokens to the t-SNE output file generated by SemasioFlow.

    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located

    Returns
    -------
    None
    """

    # Construct file paths
    tsne_file = os.path.join(input_folder, f'{token}-{model}.tsne.30.tsv')
    variables_file = os.path.join(input_folder, f'{token}.variables.tsv')

    # Ensure input files exist
    if not os.path.exists(tsne_file):
        raise FileNotFoundError(f"t-SNE file not found: {tsne_file}")
    if not os.path.exists(variables_file):
        raise FileNotFoundError(f"Variables file not found: {variables_file}")

    # Read data
    tsne_df = pd.read_csv(tsne_file, sep='\t')
    variables_df = pd.read_csv(variables_file, sep='\t')

    # Filter out columns that start with '_'
    info_columns = [col for col in variables_df.columns if not col.startswith('_')]

    # Ensure there are columns to map
    if not info_columns:
        print(f"No additional columns found in {variables_file} to map.")
        return

    # Set index and merge additional information
    tsne_df = tsne_df.merge(variables_df[['_id'] + info_columns], on='_id', how='left')

    # Save the updated t-SNE file
    tsne_df.to_csv(tsne_file, sep='\t', index=False)
    print(f'The additional information for {token}-{model} was added successfully.')

def get_model_data(token, model, input_folder, min_cluster_size, min_samples):
    """
    Extract the coordinates and senses of the given token from the t-SNE output file generated by SemasioFlow.
    
    Parameters
    ----------
    token : str
        The token of interest
    model : str
        The model name
    input_folder : str
        The folder where the input files are located
    
    Returns
    -------
    None
    """
    get_coordinates(token, model, input_folder)
    apply_HDBSCAN(token, model, input_folder, min_cluster_size, min_samples)
    get_other_info(token, model, input_folder)
    print('The model data was extracted')